/*
 *  TwinCode is an education project.
 *  You are free to use this code for educational purposes. Please improve the code.
 */
package org.twincoder.ide.ui;

import org.twincoder.ide.canvas.CanvasObject;
import org.twincoder.ide.program.Program;
import org.twincoder.ide.program.InputListener;
import org.twincoder.ide.program.ProgramOutputInterface;
import org.twincoder.ide.program.ThreadControl;
import java.awt.BorderLayout;
import java.awt.Dimension;
import org.twincoder.ide.program.ProgramContext;

/**
 *
 * @author gbornia
 */
public class ProgramOutputPanel extends javax.swing.JPanel implements ProgramOutputInterface {

    private final Program program;
    private final CanvasOutputPanel outputPanel;
    private ProgramControlPanel programControlPanel;
    
    /**
     * Creates new form Output
     * @param program
     */
    public ProgramOutputPanel(Program program, boolean showControl) {
        initComponents();
        this.program = program;     
        
        this.outputPanel = new CanvasOutputPanel();
        this.add(outputPanel, BorderLayout.CENTER); 
        
        if (showControl) {
            showProgramControl();
        } else {
            hideProgramControl();
        }
    }

    public Program getProgram() {
        return program;
    }
    
    public void showProgramControl() {
        if (programControlPanel == null) {
            programControlPanel = new ProgramControlPanel(program);
            programControlPanel.setPreferredSize(new Dimension(250, 500));
            this.add(programControlPanel, BorderLayout.EAST); 
        }
    }
    
    public void hideProgramControl() {
        if (programControlPanel != null) {
            this.remove(programControlPanel);
            programControlPanel.disposeResources();
            programControlPanel = null;
        }       
    }
    
    public boolean isProgramControlVisible() {
        return (programControlPanel != null);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void clear() {
        outputPanel.clear();
    }

    @Override
    public void print(String text) {
        outputPanel.print(text);
    }

    @Override
    public void println(String text) {
        outputPanel.println(text);
    }

    @Override
    public void addCanvasObject(CanvasObject object) {
        outputPanel.addCanvasObject(object);
    }

    @Override
    public void startInput(InputListener inputListener, ThreadControl threadControl) {
        outputPanel.startInput(inputListener, threadControl);
    }


    public void setRulerVisible(boolean visible) {
        outputPanel.setRulerVisible(visible);
    }
    
    public boolean isRulerVisible() {
        return outputPanel.isRulerVisible();
    }

    @Override
    public void setProperty(String property, String value) {
        outputPanel.setProperty(property, value);
    }

    @Override
    public void initialize(ProgramContext context) {
        outputPanel.initialize(context);
    }

    @Override
    public void setFocus() {
        outputPanel.setFocus();
    }


    @Override
    public void disposeResources() {
        outputPanel.disposeResources();
        
        if (programControlPanel != null) {
            programControlPanel.disposeResources();
        }  
    }

    @Override
    public int getWindowWidth() {
        return outputPanel.getWindowWidth();
    }

    @Override
    public int getWindowHeight() {
        return outputPanel.getWindowHeight();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
